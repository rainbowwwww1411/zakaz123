import database.requests as rq
import keyboards as kb
import os, math, asyncio, random, calendar
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from admin import IsAdmin, IsAdmin2
from flyerapi import Flyer
from aiogram.utils.deep_linking import create_start_link, decode_payload
from datetime import datetime

router = Router()
flyer = Flyer(key=os.getenv('FLAYER_KEY'))
media_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'media')
admins_list = [6299587911, 780102984]

chicken_smile = ['üê£', 'üê§', 'üê•', 'üêî', 'üêì']

fed_smile = {
    '–°—ã—Ç–∞—è': 'üòä',
    '–ì–æ–ª–æ–¥–Ω–∞—è': 'üòã',
    '–ú—ë—Ä—Ç–≤–∞—è': 'üòµ'
}

async def getimg():
    lvl1 = FSInputFile(path=os.path.join(media_dir, '1lvl.jpg'))
    lvl2 = FSInputFile(path=os.path.join(media_dir, '2lvl.jpg'))
    lvl3 = FSInputFile(path=os.path.join(media_dir, '3lvl.jpg'))
    lvl4 = FSInputFile(path=os.path.join(media_dir, '4lvl.jpg'))
    lvl5 = FSInputFile(path=os.path.join(media_dir, '5lvl.jpg'))
    win = FSInputFile(path=os.path.join(media_dir, 'win.jpg'))
    lose = FSInputFile(path=os.path.join(media_dir, 'lose.jpg'))
    dead = FSInputFile(path=os.path.join(media_dir, 'dead.jpg'))
    swap = FSInputFile(path=os.path.join(media_dir, 'swap.jpg'))
    nightattack = FSInputFile(path=os.path.join(media_dir, 'nightattack.jpg'))
    return lvl1, lvl2, lvl3, lvl4, lvl5, win, lose, dead, swap, nightattack

async def getimgurl():
    lvl1 = InputMediaPhoto(media='https://ibb.co/xt5QhCYq')
    lvl2 = InputMediaPhoto(media='https://ibb.co/HDs3gZC6')
    lvl3 = InputMediaPhoto(media='https://ibb.co/qf18c4M')
    lvl4 = InputMediaPhoto(media='https://ibb.co/0j8ZP9Tx')
    lvl5 = InputMediaPhoto(media='https://ibb.co/MXv4Zq2')
    win = InputMediaPhoto(media='https://ibb.co/fVTZ3c1T')
    lose = InputMediaPhoto(media='https://ibb.co/Dfj8YFJn')
    dead = InputMediaPhoto(media='https://ibb.co/ycdYVDvG')
    swap = InputMediaPhoto(media='https://ibb.co/gbvxSLKs')
    nightattack = InputMediaPhoto(media='https://ibb.co/gLSnzb2k')
    return lvl1, lvl2, lvl3, lvl4, lvl5, win, lose, dead, swap, nightattack

class get(StatesGroup):
    chickenname = State()
    robber_tg_id = State()
    user_id = State()
    roblox_name = State()
    amount = State()
    user_message = State()
    message = State()
    message2 = State()
    to_id = State()
    req_id = State()
    hp = State()
    fed = State()
    lvl = State()
    eggs = State()
    name = State()
    ref_count = State()
    upd_id = State()
    tg_id = State()
    mail = State()

class Chicken:
    def __init__(self, level, lives):
        self.lives = lives
        self.level = level
        self.feed_times = self.get_feed_times()
        self.daily_eggs = self.get_daily_eggs()
        self.ref_needed = self.get_ref_needed()


    def get_feed_times(self):
        feed_times = {
            1: ["8:00-8:05", "13:00-13:05", "20:00-20:05"],
            2: ["8:00-8:10", "13:00-13:10", "20:00-20:10"],
            3: ["8:00-8:15", "13:00-13:15", "20:00-20:15"],
            4: ["8:00-8:20", "13:00-13:20", "20:00-20:20"],
            5: ["8:00-8:30", "13:00-13:30", "20:00-20:30"]
        }
        return feed_times.get(self.level, [])

    def get_daily_eggs(self):
        if self.lives=='2':
            eggs_per_level = {
                1: 10,
                2: 20,
                3: 30,
                4: 40,
                5: 50
            }
        elif self.lives=='1':
            eggs_per_level = {
                1: 5,
                2: 10,
                3: 15,
                4: 20,
                5: 15
            }
        else:
            eggs_per_level = {
                1: 0,
                2: 0,
                3: 0,
                4: 0,
                5: 0
            }
        return eggs_per_level.get(self.level, 0)

    def get_ref_needed(self):
        ref_needed = {
            1: 10,
            2: 15,
            3: 20,
            4: 25,
            5: 0  
        }
        return ref_needed.get(self.level, 0)

    def get_chicken_info(self):
        return {
            "level": self.level,
            "feed_times": self.feed_times,
            "daily_eggs": self.daily_eggs,
            "ref_needed": self.ref_needed,
        }

@router.message(CommandStart())
async def start(message: Message, state: FSMContext, bot: Bot):
    print(message.text)
    await message.answer('<b>–ß–¢–û–ë–´ –ü–û–õ–£–ß–ò–¢–¨ –†–û–ë–£–ö–°–´ –ë–ï–ó –õ–û–ì–ò–ù–ê –ò –ü–ê–†–û–õ–Ø –í–°–¢–£–ü–ò –í –ì–†–£–ü–ü–£üëáüëáüëá</b>', reply_markup=await kb.linkgroup())
    if message.text == '/start':
        await rq.set_user(message.from_user.id, 'None')
    else:
        invatitefrom = decode_payload(message.text.split(' ')[1])
        print(invatitefrom)
        from_data = await rq.get_user(invatitefrom)
        for fromuser in from_data:
            if int(fromuser.chickenhp) > 0:
                await rq.set_user(message.from_user.id, invatitefrom)
                new_ref_count = int(fromuser.ref_count) + 1
                await rq.upd_count(invatitefrom, new_ref_count)
            else:
                await rq.set_user(message.from_user.id, 'None')
    user_data = await rq.get_user(message.from_user.id)
    for user in user_data:
        if user.chickenname == 'None':
            await message.answer("üê£ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–π –∫—É—Ä–∏—Ü—ã:")
            await state.set_state(get.chickenname)
        else:
            img = await getimg()
            link = await create_start_link(bot,str(message.from_user.id), encode=True)
            feed_time = Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['feed_times']
            feed_times = str(f'{feed_time[0]}, {feed_time[1]}, {feed_time[2]}')
            await bot.send_photo(photo=img[int(user.chickenlvl)-1], chat_id=message.from_user.id, 
                                 caption=f"{chicken_smile[int(user.chickenlvl)-1]} <b>–ò–º—è –∫—É—Ä–∏—Ü—ã: {user.chickenname}</b>\n\nüí∞ –ë–∞–ª–∞–Ω—Å: <b>{user.eggs}</b>\nü•ö –Ø–∏—Ü –≤ –¥–µ–Ω—å: <b>{Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['daily_eggs']}</b>\n\nüìä –£—Ä–æ–≤–µ–Ω—å –∫—É—Ä–∏—Ü—ã: <b>{user.chickenlvl}</b>\n{fed_smile[user.fed]} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä–∏—Ü—ã: <b>{user.fed}</b>\n‚ô•Ô∏è –ö–æ–ª-–≤–æ –∂–∏–∑–Ω–µ–π: <b>{user.chickenhp}</b>\n\n‚è∞ –í—Ä–µ–º—è –∫–æ—Ä–º–∏—Ç—å: <b>{feed_times}</b>\n\nüë• –ö–æ–ª-–≤–æ —Ä–µ—Ñ–æ–≤: <b>{user.ref_count}</b>\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>{link}</code>",
                                 reply_markup=await kb.menu())

@router.message(get.chickenname)
async def chickenname(message: Message, state: FSMContext, bot: Bot):
    img = await getimg()
    await rq.create_chicken(message.from_user.id, message.text)
    user_data = await rq.get_user(message.from_user.id)
    link = await create_start_link(bot,str(message.from_user.id), encode=True)
    for user in user_data:
        feed_time = Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['feed_times']
        feed_times = str(f'{feed_time[0]}, {feed_time[1]}, {feed_time[2]}')
        await bot.send_photo(photo=img[int(user.chickenlvl)-1], chat_id=message.from_user.id, 
                                 caption=f"{chicken_smile[int(user.chickenlvl)-1]} <b>–ò–º—è –∫—É—Ä–∏—Ü—ã: {user.chickenname}</b>\n\nüí∞ –ë–∞–ª–∞–Ω—Å: <b>{user.eggs}</b>\nü•ö –Ø–∏—Ü –≤ –¥–µ–Ω—å: <b>{Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['daily_eggs']}</b>\n\nüìä –£—Ä–æ–≤–µ–Ω—å –∫—É—Ä–∏—Ü—ã: <b>{user.chickenlvl}</b>\n{fed_smile[user.fed]} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä–∏—Ü—ã: <b>{user.fed}</b>\n‚ô•Ô∏è –ö–æ–ª-–≤–æ –∂–∏–∑–Ω–µ–π: <b>{user.chickenhp}</b>\n\n‚è∞ –í—Ä–µ–º—è –∫–æ—Ä–º–∏—Ç—å: <b>{feed_times}</b>\n\nüë• –ö–æ–ª-–≤–æ —Ä–µ—Ñ–æ–≤: <b>{user.ref_count}</b>\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>{link}</code>",
                                 reply_markup=await kb.menu())
    await state.clear()
    
@router.callback_query(F.data=='getgoldegg')
async def getgoldegg(callback: CallbackQuery, bot: Bot):
    user_data = await rq.get_user(callback.from_user.id)
    for user in user_data:
        if user.now_gold_egg == 1:
            await rq.upd_eggs(callback.from_user.id, user.eggs+10)
            await rq.upd_now_gold_egg(callback.from_user.id, 0)
            await callback.message.edit_text('<b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–ª–∏ –∑–æ–ª–æ—Ç–æ–µ —è–π—Ü–æ!</b>\n\n–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>10</b> —è–∏—Ü.', reply_markup=await kb.del_msg())
        else:
             await callback.message.edit_text('<b>–í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –∑–∞–±—Ä–∞—Ç—å –∑–æ–ª–æ—Ç–æ–µ —è–π—Ü–æ!</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.', reply_markup=await kb.del_msg())


@router.callback_query(F.data=='fed')
async def fed(callback: CallbackQuery, bot: Bot):
    check = await flyer.check(user_id=callback.from_user.id, language_code=callback.from_user.language_code)
    if not check:
        return
    else:
        img = await getimg()
        link = await create_start_link(bot,str(callback.from_user.id), encode=True)
        check = str(datetime.now()).split(' ')[1].split(':')
        h = check[0]
        m = int(check[1])
        user_data = await rq.get_user(callback.from_user.id)
        for user in user_data:
            if user.chickenlvl == '1':
                if h == '8' and m >= 00 and m <= 5 or h == '13' and m >= 00 and m <= 5 or h == '20' and m >= 00 and m <= 5:
                    if user.fed == '–ì–æ–ª–æ–¥–Ω–∞—è':
                        await rq.upd_fed(callback.from_user.id, '–°—ã—Ç–∞—è')
                        await callback.answer(text='–í—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ –∫—É—Ä–∏—Ü—É!')
                        feed_time = Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['feed_times']
                        feed_times = str(f'{feed_time[0]}, {feed_time[1]}, {feed_time[2]}')
                        await bot.edit_message_caption(message_id=callback.message.message_id,chat_id=callback.from_user.id, 
                                    caption=f"{chicken_smile[int(user.chickenlvl)-1]} <b>–ò–º—è –∫—É—Ä–∏—Ü—ã: {user.chickenname}</b>\n\nüí∞ –ë–∞–ª–∞–Ω—Å: <b>{user.eggs}</b>\nü•ö –Ø–∏—Ü –≤ –¥–µ–Ω—å: <b>{Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['daily_eggs']}</b>\n\nüìä –£—Ä–æ–≤–µ–Ω—å –∫—É—Ä–∏—Ü—ã: <b>{user.chickenlvl}</b>\n{fed_smile[user.fed]} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä–∏—Ü—ã: <b>{user.fed}</b>\n‚ô•Ô∏è –ö–æ–ª-–≤–æ –∂–∏–∑–Ω–µ–π: <b>{user.chickenhp}</b>\n\n‚è∞ –í—Ä–µ–º—è –∫–æ—Ä–º–∏—Ç—å: <b>{feed_times}</b>\n\nüë• –ö–æ–ª-–≤–æ —Ä–µ—Ñ–æ–≤: <b>{user.ref_count}</b>\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>{link}</code>",
                                    reply_markup=await kb.menu())
                    elif user.fed == '–°—ã—Ç–∞—è':
                        await callback.answer(text='–í–∞—à–∞ –∫—É—Ä–∏—Ü–∞ —Å—ã—Ç–∞!')
                    else:
                        await callback.answer(text='–í–∞—à–∞ –∫—É—Ä–∏—Ü–∞ –º–µ—Ä—Ç–≤–∞!')
                else:
                    await callback.answer(text='–í–∞—à–∞ –∫—É—Ä–∏—Ü–∞ —Å—ã—Ç–∞!')
            elif user.chickenlvl == '2':
                if h == '8' and m >= 00 and m <= 10 or h == '13' and m >= 00 and m <= 10 or h == '20' and m >= 00 and m <= 10:
                    if user.fed == '–ì–æ–ª–æ–¥–Ω–∞—è':
                        await rq.upd_fed(callback.from_user.id, '–°—ã—Ç–∞—è')
                        await callback.answer(text='–í—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ –∫—É—Ä–∏—Ü—É!')
                        feed_time = Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['feed_times']
                        feed_times = str(f'{feed_time[0]}, {feed_time[1]}, {feed_time[2]}')
                        await bot.edit_message_caption(message_id=callback.message.message_id,chat_id=callback.from_user.id, 
                                    caption=f"{chicken_smile[int(user.chickenlvl)-1]} <b>–ò–º—è –∫—É—Ä–∏—Ü—ã: {user.chickenname}</b>\n\nüí∞ –ë–∞–ª–∞–Ω—Å: <b>{user.eggs}</b>\nü•ö –Ø–∏—Ü –≤ –¥–µ–Ω—å: <b>{Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['daily_eggs']}</b>\n\nüìä –£—Ä–æ–≤–µ–Ω—å –∫—É—Ä–∏—Ü—ã: <b>{user.chickenlvl}</b>\n{fed_smile[user.fed]} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä–∏—Ü—ã: <b>{user.fed}</b>\n‚ô•Ô∏è –ö–æ–ª-–≤–æ –∂–∏–∑–Ω–µ–π: <b>{user.chickenhp}</b>\n\n‚è∞ –í—Ä–µ–º—è –∫–æ—Ä–º–∏—Ç—å: <b>{feed_times}</b>\n\nüë• –ö–æ–ª-–≤–æ —Ä–µ—Ñ–æ–≤: <b>{user.ref_count}</b>\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>{link}</code>",
                                    reply_markup=await kb.menu())
                    elif user.fed == '–°—ã—Ç–∞—è':
                        await callback.answer(text='–í–∞—à–∞ –∫—É—Ä–∏—Ü–∞ —Å—ã—Ç–∞!')
                    else:
                        await callback.answer(text='–í–∞—à–∞ –∫—É—Ä–∏—Ü–∞ –º–µ—Ä—Ç–≤–∞!')
                else:
                    await callback.answer(text='–í–∞—à–∞ –∫—É—Ä–∏—Ü–∞ —Å—ã—Ç–∞!')
            elif user.chickenlvl == '3':
                if h == '8' and m >= 00 and m <= 15 or h == '13' and m >= 00 and m <= 15 or h == '20' and m >= 00 and m <= 15:
                    if user.fed == '–ì–æ–ª–æ–¥–Ω–∞—è':
                        await rq.upd_fed(callback.from_user.id, '–°—ã—Ç–∞—è')
                        await callback.answer(text='–í—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ –∫—É—Ä–∏—Ü—É!')
                        feed_time = Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['feed_times']
                        feed_times = str(f'{feed_time[0]}, {feed_time[1]}, {feed_time[2]}')
                        await bot.edit_message_caption(message_id=callback.message.message_id,chat_id=callback.from_user.id, 
                                    caption=f"{chicken_smile[int(user.chickenlvl)-1]} <b>–ò–º—è –∫—É—Ä–∏—Ü—ã: {user.chickenname}</b>\n\nüí∞ –ë–∞–ª–∞–Ω—Å: <b>{user.eggs}</b>\nü•ö –Ø–∏—Ü –≤ –¥–µ–Ω—å: <b>{Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['daily_eggs']}</b>\n\nüìä –£—Ä–æ–≤–µ–Ω—å –∫—É—Ä–∏—Ü—ã: <b>{user.chickenlvl}</b>\n{fed_smile[user.fed]} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä–∏—Ü—ã: <b>{user.fed}</b>\n‚ô•Ô∏è –ö–æ–ª-–≤–æ –∂–∏–∑–Ω–µ–π: <b>{user.chickenhp}</b>\n\n‚è∞ –í—Ä–µ–º—è –∫–æ—Ä–º–∏—Ç—å: <b>{feed_times}</b>\n\nüë• –ö–æ–ª-–≤–æ —Ä–µ—Ñ–æ–≤: <b>{user.ref_count}</b>\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>{link}</code>",
                                    reply_markup=await kb.menu())
                    elif user.fed == '–°—ã—Ç–∞—è':
                        await callback.answer(text='–í–∞—à–∞ –∫—É—Ä–∏—Ü–∞ —Å—ã—Ç–∞!')
                    else:
                        await callback.answer(text='–í–∞—à–∞ –∫—É—Ä–∏—Ü–∞ –º–µ—Ä—Ç–≤–∞!')
                else:
                    await callback.answer(text='–í–∞—à–∞ –∫—É—Ä–∏—Ü–∞ —Å—ã—Ç–∞!')
            elif user.chickenlvl == '4':
                if h == '8' and m >= 00 and m <= 20 or h == '13' and m >= 00 and m <= 20 or h == '20' and m >= 00 and m <= 20:
                    if user.fed == '–ì–æ–ª–æ–¥–Ω–∞—è':
                        await rq.upd_fed(callback.from_user.id, '–°—ã—Ç–∞—è')
                        await callback.answer(text='–í—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ –∫—É—Ä–∏—Ü—É!')
                        feed_time = Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['feed_times']
                        feed_times = str(f'{feed_time[0]}, {feed_time[1]}, {feed_time[2]}')
                        await bot.edit_message_caption(message_id=callback.message.message_id,chat_id=callback.from_user.id, 
                                    caption=f"{chicken_smile[int(user.chickenlvl)-1]} <b>–ò–º—è –∫—É—Ä–∏—Ü—ã: {user.chickenname}</b>\n\nüí∞ –ë–∞–ª–∞–Ω—Å: <b>{user.eggs}</b>\nü•ö –Ø–∏—Ü –≤ –¥–µ–Ω—å: <b>{Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['daily_eggs']}</b>\n\nüìä –£—Ä–æ–≤–µ–Ω—å –∫—É—Ä–∏—Ü—ã: <b>{user.chickenlvl}</b>\n{fed_smile[user.fed]} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä–∏—Ü—ã: <b>{user.fed}</b>\n‚ô•Ô∏è –ö–æ–ª-–≤–æ –∂–∏–∑–Ω–µ–π: <b>{user.chickenhp}</b>\n\n‚è∞ –í—Ä–µ–º—è –∫–æ—Ä–º–∏—Ç—å: <b>{feed_times}</b>\n\nüë• –ö–æ–ª-–≤–æ —Ä–µ—Ñ–æ–≤: <b>{user.ref_count}</b>\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>{link}</code>",
                                    reply_markup=await kb.menu())
                    elif user.fed == '–°—ã—Ç–∞—è':
                        await callback.answer(text='–í–∞—à–∞ –∫—É—Ä–∏—Ü–∞ —Å—ã—Ç–∞!')
                    else:
                        await callback.answer(text='–í–∞—à–∞ –∫—É—Ä–∏—Ü–∞ –º–µ—Ä—Ç–≤–∞!')
                else:
                    await callback.answer(text='–í–∞—à–∞ –∫—É—Ä–∏—Ü–∞ —Å—ã—Ç–∞!')
            elif user.chickenlvl == '5':
                if h == '8' and m >= 00 and m <= 30 or h == '13' and m >= 00 and m <= 30 or h == '20' and m >= 00 and m <= 30:
                    if user.fed == '–ì–æ–ª–æ–¥–Ω–∞—è':
                        await rq.upd_fed(callback.from_user.id, '–°—ã—Ç–∞—è')
                        await callback.answer(text='–í—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ –∫—É—Ä–∏—Ü—É!')
                        feed_time = Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['feed_times']
                        feed_times = str(f'{feed_time[0]}, {feed_time[1]}, {feed_time[2]}')
                        await bot.edit_message_caption(message_id=callback.message.message_id,chat_id=callback.from_user.id, 
                                    caption=f"{chicken_smile[int(user.chickenlvl)-1]} <b>–ò–º—è –∫—É—Ä–∏—Ü—ã: {user.chickenname}</b>\n\nüí∞ –ë–∞–ª–∞–Ω—Å: <b>{user.eggs}</b>\nü•ö –Ø–∏—Ü –≤ –¥–µ–Ω—å: <b>{Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['daily_eggs']}</b>\n\nüìä –£—Ä–æ–≤–µ–Ω—å –∫—É—Ä–∏—Ü—ã: <b>{user.chickenlvl}</b>\n{fed_smile[user.fed]} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä–∏—Ü—ã: <b>{user.fed}</b>\n‚ô•Ô∏è –ö–æ–ª-–≤–æ –∂–∏–∑–Ω–µ–π: <b>{user.chickenhp}</b>\n\n‚è∞ –í—Ä–µ–º—è –∫–æ—Ä–º–∏—Ç—å: <b>{feed_times}</b>\n\nüë• –ö–æ–ª-–≤–æ —Ä–µ—Ñ–æ–≤: <b>{user.ref_count}</b>\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>{link}</code>",
                                    reply_markup=await kb.menu())
                    elif user.fed == '–°—ã—Ç–∞—è':
                        await callback.answer(text='–í–∞—à–∞ –∫—É—Ä–∏—Ü–∞ —Å—ã—Ç–∞!')
                    else:
                        await callback.answer(text='–í–∞—à–∞ –∫—É—Ä–∏—Ü–∞ –º–µ—Ä—Ç–≤–∞!')
                else:
                    await callback.answer(text='–í–∞—à–∞ –∫—É—Ä–∏—Ü–∞ —Å—ã—Ç–∞!')

@router.callback_query(F.data.startswith('toknow'))
async def toknow(callback: CallbackQuery, bot: Bot):
    user_data = await rq.get_user(callback.from_user.id)
    for user in user_data:
        if user.eggs>30:
            await callback.message.edit_text(f'TGID –≥—Ä–∞–±–∏—Ç–µ–ª—è: <b>{callback.data.split('_')[1]}</b>\n\n–ó–∞ —É—Å–ª—É–≥—É –±—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ 30 —è–∏—Ü.')

@router.callback_query(F.data=='top')
async def fed(callback: CallbackQuery, bot: Bot):
    top_users = await rq.check_top()
    toppers = []
    for top in top_users:
        toppers.append([top.tg_id, top.chickenname, top.eggs])
    try:
        await callback.message.answer(f'''<b>üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
                                      
ü•á {toppers[0][1]} - {toppers[0][2]} —è–∏—Ü
ü•à {toppers[1][1]} - {toppers[1][2]} —è–∏—Ü
ü•â {toppers[2][1]} - {toppers[2][2]} —è–∏—Ü
üèÖ {toppers[3][1]} - {toppers[3][2]} —è–∏—Ü
üèÖ {toppers[4][1]} - {toppers[4][2]} —è–∏—Ü''', reply_markup=await kb.del_msg())
    except Exception as e:
        print(e)
        await callback.answer('–¢–æ–ø –ø—É—Å—Ç–æ–π')

@router.callback_query(F.data=='up_lvl')
async def up_lvl(callback: CallbackQuery, bot: Bot):
    img = await getimgurl()
    link = await create_start_link(bot,str(callback.from_user.id), encode=True)
    user_data = await rq.get_user(callback.from_user.id)
    for user in user_data:
        if int(user.chickenlvl) == 1 and int(user.ref_count) >= 10:
            await rq.upd_lvl(callback.from_user.id, 2)
            await callback.answer('–í–∞—à —É—Ä–æ–≤–µ–Ω—å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ 2')
            feed_time = Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['feed_times']
            feed_times = str(f'{feed_time[0]}, {feed_time[1]}, {feed_time[2]}')
            await bot.edit_message_media(chat_id=callback.from_user.id, message_id=callback.message.message_id, media=img[1])
            await bot.edit_message_caption(chat_id=callback.from_user.id, message_id=callback.message.message_id, caption=f"{chicken_smile[int(user.chickenlvl)-1]} <b>–ò–º—è –∫—É—Ä–∏—Ü—ã: {user.chickenname}</b>\n\nüí∞ –ë–∞–ª–∞–Ω—Å: <b>{user.eggs}</b>\nü•ö –Ø–∏—Ü –≤ –¥–µ–Ω—å: <b>{Chicken(level=2, lives=user.chickenhp).get_chicken_info()['daily_eggs']}</b>\n\nüìä –£—Ä–æ–≤–µ–Ω—å –∫—É—Ä–∏—Ü—ã: <b>2</b>\n{fed_smile[user.fed]} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä–∏—Ü—ã: <b>{user.fed}</b>\n‚ô•Ô∏è –ö–æ–ª-–≤–æ –∂–∏–∑–Ω–µ–π: <b>{user.chickenhp}</b>\n\n‚è∞ –í—Ä–µ–º—è –∫–æ—Ä–º–∏—Ç—å: <b>{feed_times}</b>\n\nüë• –ö–æ–ª-–≤–æ —Ä–µ—Ñ–æ–≤: <b>{user.ref_count}</b>\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>{link}</code>", 
                                           reply_markup=await kb.menu())
        elif int(user.chickenlvl) == 2 and int(user.ref_count) >= 25:
            await rq.upd_lvl(callback.from_user.id, 3)
            await callback.answer('–í–∞—à —É—Ä–æ–≤–µ–Ω—å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ 3')
            feed_time = Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['feed_times']
            feed_times = str(f'{feed_time[0]}, {feed_time[1]}, {feed_time[2]}')
            await bot.edit_message_media(chat_id=callback.from_user.id, message_id=callback.message.message_id, media=img[2])
            await bot.edit_message_caption(chat_id=callback.from_user.id, message_id=callback.message.message_id, caption=f"{chicken_smile[int(user.chickenlvl)-1]} <b>–ò–º—è –∫—É—Ä–∏—Ü—ã: {user.chickenname}</b>\n\nüí∞ –ë–∞–ª–∞–Ω—Å: <b>{user.eggs}</b>\nü•ö –Ø–∏—Ü –≤ –¥–µ–Ω—å: <b>{Chicken(level=3, lives=user.chickenhp).get_chicken_info()['daily_eggs']}</b>\n\nüìä –£—Ä–æ–≤–µ–Ω—å –∫—É—Ä–∏—Ü—ã: <b>3</b>\n{fed_smile[user.fed]} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä–∏—Ü—ã: <b>{user.fed}</b>\n‚ô•Ô∏è –ö–æ–ª-–≤–æ –∂–∏–∑–Ω–µ–π: <b>{user.chickenhp}</b>\n\n‚è∞ –í—Ä–µ–º—è –∫–æ—Ä–º–∏—Ç—å: <b>{feed_times}</b>\n\nüë• –ö–æ–ª-–≤–æ —Ä–µ—Ñ–æ–≤: <b>{user.ref_count}</b>\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>{link}</code>", 
                                           reply_markup=await kb.menu())
        elif int(user.chickenlvl) == 3 and int(user.ref_count) >= 45:
            await rq.upd_lvl(callback.from_user.id, 4)
            await callback.answer('–í–∞—à —É—Ä–æ–≤–µ–Ω—å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ 4')
            feed_time = Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['feed_times']
            feed_times = str(f'{feed_time[0]}, {feed_time[1]}, {feed_time[2]}')
            await bot.edit_message_media(chat_id=callback.from_user.id, message_id=callback.message.message_id, media=img[3])
            await bot.edit_message_caption(chat_id=callback.from_user.id, message_id=callback.message.message_id, caption=f"{chicken_smile[int(user.chickenlvl)-1]} <b>–ò–º—è –∫—É—Ä–∏—Ü—ã: {user.chickenname}</b>\n\nüí∞ –ë–∞–ª–∞–Ω—Å: <b>{user.eggs}</b>\nü•ö –Ø–∏—Ü –≤ –¥–µ–Ω—å: <b>{Chicken(level=4, lives=user.chickenhp).get_chicken_info()['daily_eggs']}</b>\n\nüìä –£—Ä–æ–≤–µ–Ω—å –∫—É—Ä–∏—Ü—ã: <b>4</b>\n{fed_smile[user.fed]} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä–∏—Ü—ã: <b>{user.fed}</b>\n‚ô•Ô∏è –ö–æ–ª-–≤–æ –∂–∏–∑–Ω–µ–π: <b>{user.chickenhp}</b>\n\n‚è∞ –í—Ä–µ–º—è –∫–æ—Ä–º–∏—Ç—å: <b>{feed_times}</b>\n\nüë• –ö–æ–ª-–≤–æ —Ä–µ—Ñ–æ–≤: <b>{user.ref_count}</b>\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>{link}</code>", 
                                           reply_markup=await kb.menu())
        elif int(user.chickenlvl) == 4 and int(user.ref_count) >= 70:
            await rq.upd_lvl(callback.from_user.id, 5)
            await callback.answer('–í–∞—à —É—Ä–æ–≤–µ–Ω—å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ 5')
            feed_time = Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['feed_times']
            feed_times = str(f'{feed_time[0]}, {feed_time[1]}, {feed_time[2]}')
            await bot.edit_message_media(chat_id=callback.from_user.id, message_id=callback.message.message_id, media=img[4])
            await bot.edit_message_caption(chat_id=callback.from_user.id, message_id=callback.message.message_id, caption=f"{chicken_smile[int(user.chickenlvl)-1]} <b>–ò–º—è –∫—É—Ä–∏—Ü—ã: {user.chickenname}</b>\n\nüí∞ –ë–∞–ª–∞–Ω—Å: <b>{user.eggs}</b>\nü•ö –Ø–∏—Ü –≤ –¥–µ–Ω—å: <b>{Chicken(level=5, lives=user.chickenhp).get_chicken_info()['daily_eggs']}</b>\n\nüìä –£—Ä–æ–≤–µ–Ω—å –∫—É—Ä–∏—Ü—ã: <b>5</b>\n{fed_smile[user.fed]} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä–∏—Ü—ã: <b>{user.fed}</b>\n‚ô•Ô∏è –ö–æ–ª-–≤–æ –∂–∏–∑–Ω–µ–π: <b>{user.chickenhp}</b>\n\n‚è∞ –í—Ä–µ–º—è –∫–æ—Ä–º–∏—Ç—å: <b>{feed_times}</b>\n\nüë• –ö–æ–ª-–≤–æ —Ä–µ—Ñ–æ–≤: <b>{user.ref_count}</b>\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>{link}</code>", 
                                           reply_markup=await kb.menu())
        elif int(user.chickenlvl) < 2 and int(user.ref_count) < 10:
            await callback.answer(f'–î–æ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –≤–∞–º –Ω—É–∂–Ω–æ {10 - int(user.ref_count)} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤')
        elif int(user.chickenlvl) < 3 and int(user.chickenlvl) > 1 and int(user.ref_count) < 25:
            await callback.answer(f'–î–æ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –≤–∞–º –Ω—É–∂–Ω–æ {25 - int(user.ref_count)} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤')
        elif int(user.chickenlvl) < 4 and int(user.chickenlvl) > 2 and int(user.ref_count) < 45:
            await callback.answer(f'–î–æ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –≤–∞–º –Ω—É–∂–Ω–æ {45 - int(user.ref_count)} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤')
        elif int(user.chickenlvl) < 5 and int(user.chickenlvl) > 3 and int(user.ref_count) < 70:
            await callback.answer(f'–î–æ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –≤–∞–º –Ω—É–∂–Ω–æ {70 - int(user.ref_count)} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤')

@router.callback_query(F.data=='update')
async def update(callback: CallbackQuery, bot: Bot):
        user_data = await rq.get_user(callback.from_user.id)
        for user in user_data:
            img = await getimgurl()
            link = await create_start_link(bot,str(callback.from_user.id), encode=True)
            photo = img[int(user.chickenlvl)-1]
            await bot.edit_message_media(media=photo, chat_id=callback.from_user.id,
            message_id=callback.message.message_id,)
            feed_time = Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['feed_times']
            feed_times = str(f'{feed_time[0]}, {feed_time[1]}, {feed_time[2]}')
            await bot.edit_message_caption(message_id=callback.message.message_id, chat_id=callback.from_user.id, 
                                 caption=f"{chicken_smile[int(user.chickenlvl)-1]} <b>–ò–º—è –∫—É—Ä–∏—Ü—ã: {user.chickenname}</b>\n\nüí∞ –ë–∞–ª–∞–Ω—Å: <b>{user.eggs}</b>\nü•ö –Ø–∏—Ü –≤ –¥–µ–Ω—å: <b>{Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['daily_eggs']}</b>\n\nüìä –£—Ä–æ–≤–µ–Ω—å –∫—É—Ä–∏—Ü—ã: <b>{user.chickenlvl}</b>\n{fed_smile[user.fed]} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä–∏—Ü—ã: <b>{user.fed}</b>\n‚ô•Ô∏è –ö–æ–ª-–≤–æ –∂–∏–∑–Ω–µ–π: <b>{user.chickenhp}</b>\n\n‚è∞ –í—Ä–µ–º—è –∫–æ—Ä–º–∏—Ç—å: <b>{feed_times}</b>\n\nüë• –ö–æ–ª-–≤–æ —Ä–µ—Ñ–æ–≤: <b>{user.ref_count}</b>\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>{link}</code>",
                                 reply_markup=await kb.menu())
        
@router.callback_query(F.data=='night')
async def night(callback: CallbackQuery, state: FSMContext, bot: Bot):
    clocklist = str(datetime.now()).split(' ')[1].split(':')
    datelist = str(datetime.now()).split(' ')[0].split('-')
    number = int(datelist[2])
    hour = int(clocklist[0])
    img = await getimg()
    user_data = await rq.get_users()
    count = 0
    for users in user_data:
        count += 1
    user_data = await rq.get_user(callback.from_user.id)
    for user in user_data:
        if hour == 23 and int(user.chickenlvl) >= 3 and number>int(user.last_rob):
            await bot.send_photo(photo=img[9], chat_id=callback.from_user.id, caption='–¶–µ–Ω–∞ –≥—Ä–∞–±–µ–∂–∞: <b>10</b> ü•ö\n\n–í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –≥—Ä–∞–±—ë–∂?', reply_markup=await kb.night())
            await state.update_data(robber_tg_id=callback.from_user.id)
            random_num=random.randint(1, count)
            while True:
                if random_num==user.id:
                    random_num=random.randint(1, count)
                    return True
                else:
                    await state.update_data(user_id=random_num)
                    return False
        elif number>int(user.last_rob) and int(user.last_rob) != 0:
            await callback.answer('–í—ã —É–∂–µ –≥—Ä–∞–±–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è.')
        else:
            await callback.message.answer('–°—É–¥–Ω–∞—è –Ω–æ—á—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Å 23:00 –¥–æ 00:00 –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å 3-–≥–æ —É—Ä–æ–≤–Ω—è.', reply_markup=await kb.del_msg())

@router.callback_query(F.data=='rob')
async def rob(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    user_data = await rq.get_user(callback.from_user.id)
    datelist = str(datetime.now()).split(' ')[0].split('-')
    number = int(datelist[2])
    for user in user_data:
        if int(user.eggs) >= 10:
            await callback.answer('–ò—â–µ–º –∂–µ—Ä—Ç–≤—É üîé')
            user_data = await rq.get_users()
            count = 0
            for users in user_data:
                count += 1
            user_data = await rq.get_user_id(data['user_id'])
            for user in user_data:
                robber_data = await rq.get_user(callback.from_user.id)
                for robber in robber_data:
                    await rq.upd_eggs(robber.tg_id, robber.eggs-10)
                    await rq.upd_last_rob(robber.tg_id, str(number))
                    await rq.upd_now_robbery(robber.tg_id, '1')
                    await callback.message.edit_text(f'–í–∞—à–∞ –∂–µ—Ä—Ç–≤–∞: <b>{user.chickenname}</b>\n\n–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω–æ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –∂–µ—Ä—Ç–≤–∞ –Ω–µ –∑–∞—â–∏—Ç–∏—Ç—Å—è.', reply_markup=await kb.del_msg())
                    await bot.send_message(chat_id=user.tg_id, text=f'–í–∞—Å –≥—Ä–∞–±–∏—Ç {robber.chickenname}', reply_markup=await kb.defense(callback.from_user.id))
                    await asyncio.sleep(10*60)
                    img = await getimg()
                    robber_data = await rq.get_user(data['robber_tg_id'])
                    for robber in robber_data:
                        if robber.now_robbery == '1':
                            await bot.send_photo(photo=img[5], chat_id=robber.tg_id, caption=f'<b>–£—Å–ø–µ—à–Ω–æ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ!</b>\n\n–ñ–µ—Ä—Ç–≤–∞ –Ω–µ —Å—Ç–∞–ª–∞ –∑–∞—â–∏—â–∞—Ç—å—Å—è.\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>15 —è–∏—Ü.</b>', reply_markup=await kb.del_msg())
                            await rq.upd_nightuser(robber.tg_id, 1, robber.eggs+15)
                            user_data = await rq.get_user_id(data['user_id'])
                            for user in user_data:
                                if int(user.eggs) < 10:
                                    if int(user.chickenhp) == 2:
                                        await bot.send_photo(photo=img[6],chat_id=user.tg_id, caption=f'<b>–í–∞—Å –æ–≥—Ä–∞–±–∏–ª–∏!</b>\n\n‚ô•Ô∏è –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ 1 –∂–∏–∑–Ω—å.\nüîç –ó–∞ 30 —è–∏—Ü –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –≤–∞—Å –æ–≥—Ä–∞–±–∏–ª.', reply_markup=await kb.to_know(robber.tg_id))
                                        await rq.upd_nightuser(user.tg_id, 2, user.eggs-10)
                                    else:
                                        await bot.send_photo(photo=img[7],chat_id=user.tg_id, caption=f'<b>–í–∞—Å –æ–≥—Ä–∞–±–∏–ª–∏!</b>!\n\n–í–∞—à–∞ –∫—É—Ä–∏—Ü–∞ –Ω–µ –ø–µ—Ä–µ–∂–∏–ª–∞ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ –∏ —Å–∫–æ–Ω—á–∞–ª–∞—Å—å.', reply_markup=await kb.del_msg())
                                        if user.invitefrom != 'None':
                                            ref_data = await rq.get_user(user.invitefrom)
                                            for ref in ref_data:
                                                ref_count = int(ref.ref_count)-1
                                                await rq.upd_count(ref.tg_id, ref_count)
                                                await bot.send_message(chat_id=ref.tg_id, text=f'<b>–ö—É—Ä–∏—Ü–∞ –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ–≥–∏–±–ª–∞.</b> –¢–µ–ø–µ—Ä—å —É –≤–∞—Å <b>{ref_count}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.')
                                elif int(user.eggs) >= 10:
                                    await bot.send_photo(photo=img[6],chat_id=user.tg_id, caption=f'<b>–í–∞—Å –æ–≥—Ä–∞–±–∏–ª–∏!</b>\n\n‚ô•Ô∏è –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ 10 —è–∏—Ü.\nüîç –ó–∞ 30 —è–∏—Ü –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –≤–∞—Å –æ–≥—Ä–∞–±–∏–ª.', reply_markup=await kb.to_know(robber.tg_id))
        else:
            await callback.answer('–£ –≤–∞—Å –Ω–µ—Ç—É 10 —è–∏—Ü –¥–ª—è –≥—Ä–∞–±–µ–∂–∞.')

@router.callback_query(F.data.startswith('def_'))
async def defense(callback: CallbackQuery, bot: Bot):
    await bot.send_message(chat_id=callback.data.split('_')[1], text='<b>–ñ–µ—Ä—Ç–≤–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞—â–∏—Ç–∏—Ç—å—Å—è.</b> –ï—Å–ª–∏ –≤–∞–º –≤—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ –±–æ–ª—å—à–µ, —á–µ–º —É –∂–µ—Ä—Ç–≤—ã –≤—ã –µ—ë –æ–≥—Ä–∞–±–∏—Ç–µ, –∞ –∏–Ω–∞—á–µ <b>–≤—ã –ø–æ—Ç–µ—Ä–ø–∏—Ç–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ.</b>', reply_markup=await kb.del_msg())
    rob_dice = await bot.send_dice(callback.data.split('_')[1])
    rob_dice = rob_dice['dice']['value']
    user_dice = await bot.send_dice(callback.from_user.id)
    user_dice = user_dice['dice']['value']
    user_data = await rq.get_user(callback.from_user.id)
    img = await getimg()
    for user in user_data:
        if int(rob_dice) > int(user_dice):
            rob_data = await rq.get_user(callback.data.split('_')[1])
            for robber in rob_data:
                await bot.send_photo(photo=img[5], chat_id=callback.data.split('_')[1], caption=f'<b>–£—Å–ø–µ—à–Ω–æ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ!</b>\n\n–í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ <b>{rob_dice}</b>, –∞ –∂–µ—Ä—Ç–≤–µ <b>{user_dice}</b>.\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>15</b> —è–∏—Ü.', reply_markup=await kb.del_msg())
                await rq.upd_nightuser(callback.data.split('_')[1], 1, robber.eggs+15)
                if int(user.eggs) < 10:
                    if int(user.chickenhp) == 2:
                        await bot.send_photo(photo=img[6],chat_id=callback.from_user.id, caption=f'<b>–í–∞—Å –æ–≥—Ä–∞–±–∏–ª–∏!</b>\n\n–í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ <b>{user_dice}</b>, –∞ –≥—Ä–∞–±–∏—Ç–µ–ª—é <b>{rob_dice}</b>.\n\n‚ô•Ô∏è –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ 1 –∂–∏–∑–Ω—å.\nüîç –ó–∞ 30 —è–∏—Ü –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –≤–∞—Å –æ–≥—Ä–∞–±–∏–ª.', reply_markup=await kb.to_know(robber.tg_id))
                        await rq.upd_nightuser(callback.from_user.id, 2, user.eggs-10)
                    else:
                        await bot.send_photo(photo=img[7],chat_id=callback.from_user.id, caption=f'–í–∞—Å –æ–≥—Ä–∞–±–∏–ª–∏!\n\n–í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ <b>{user_dice}</b>, –∞ –≥—Ä–∞–±–∏—Ç–µ–ª—é <b>{rob_dice}</b>.\n\n–í–∞—à–∞ –∫—É—Ä–∏—Ü–∞ –Ω–µ –ø–µ—Ä–µ–∂–∏–ª–∞ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ –∏ –ø–æ–≥–∏–±–ª–∞.', reply_markup=await kb.del_msg())
                        if user.invitefrom != 'None':
                            ref_data = await rq.get_user(user.invitefrom)
                            for ref in ref_data:
                                ref_count = int(ref.ref_count)-1
                                await rq.upd_count(ref.tg_id, ref_count)
                                await bot.send_message(chat_id=ref.tg_id, text=f'<b>–ö—É—Ä–∏—Ü–∞ –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ–≥–∏–±–ª–∞.</b> –¢–µ–ø–µ—Ä—å —É –≤–∞—Å <b>{ref_count}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.')
                elif int(user.eggs) >= 10:
                    await bot.send_photo(photo=img[6],chat_id=callback.from_user.id, caption=f'<b>–í–∞—Å –æ–≥—Ä–∞–±–∏–ª–∏!</b>\n\n–í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ <b>{user_dice}</b>, –∞ –≥—Ä–∞–±–∏—Ç–µ–ª—é <b>{rob_dice}</b>.\n\n–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ 10 —è–∏—Ü.\nüîç –ó–∞ 30 —è–∏—Ü –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –≤–∞—Å –æ–≥—Ä–∞–±–∏–ª.', reply_markup=await kb.to_know(robber.tg_id))
        else:
            await bot.send_photo(photo=img[6], chat_id=callback.data.split('_')[1], caption=f'<b>–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!</b>\n\n–í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ <b>{rob_dice}</b>, –∞ –∂–µ—Ä—Ç–≤–µ <b>{user_dice}</b>.', reply_markup=await kb.del_msg())
            await bot.send_photo(photo=img[5],chat_id=callback.from_user.id, caption=f'<b>–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–±–∏–ª–∏—Å—å!</b>\n\n–í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ{user_dice}, –∞ –≥—Ä–∞–±–∏—Ç–µ–ª—é <b>{user_dice}</b>.\n\nüîç –ó–∞ 30 —è–∏—Ü –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –≤–∞—Å –ø—ã—Ç–∞–ª—Å—è –æ–≥—Ä–∞–±–∏—Ç—å.', reply_markup=await kb.to_know(robber.tg_id))

@router.callback_query(F.data=='del')
async def delete_msg(callback: CallbackQuery, bot: Bot):
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)

@router.callback_query(F.data=='to_main')
async def to_main(callback: CallbackQuery, bot: Bot):
    user_data = await rq.get_user(callback.from_user.id)
    for user in user_data:
        img = await getimg()
        link = await create_start_link(bot,str(callback.from_user.id), encode=True)
        feed_time = Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['feed_times']
        feed_times = str(f'{feed_time[0]}, {feed_time[1]}, {feed_time[2]}')
        await bot.send_photo(photo=img[int(user.chickenlvl)-1], chat_id=callback.from_user.id, 
                                 caption=f"{chicken_smile[int(user.chickenlvl)-1]} <b>–ò–º—è –∫—É—Ä–∏—Ü—ã: {user.chickenname}</b>\n\nüí∞ –ë–∞–ª–∞–Ω—Å: <b>{user.eggs}</b>\nü•ö –Ø–∏—Ü –≤ –¥–µ–Ω—å: <b>{Chicken(level=int(user.chickenlvl), lives=user.chickenhp).get_chicken_info()['daily_eggs']}</b>\n\nüìä –£—Ä–æ–≤–µ–Ω—å –∫—É—Ä–∏—Ü—ã: <b>{user.chickenlvl}</b>\n{fed_smile[user.fed]} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä–∏—Ü—ã: <b>{user.fed}</b>\n‚ô•Ô∏è –ö–æ–ª-–≤–æ –∂–∏–∑–Ω–µ–π: <b>{user.chickenhp}</b>\n\n‚è∞ –í—Ä–µ–º—è –∫–æ—Ä–º–∏—Ç—å: <b>{feed_times}</b>\n\nüë• –ö–æ–ª-–≤–æ —Ä–µ—Ñ–æ–≤: <b>{user.ref_count}</b>\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>{link}</code>",
                                 reply_markup=await kb.menu())

@router.callback_query(F.data=='withdraw')
async def withdraw(callback: CallbackQuery, state: FSMContext, bot: Bot):
    img = await getimg()
    datelist = str(datetime.now()).split(' ')[0].split('-')
    year = int(datelist[0])
    mon = int(datelist[1])
    num = int(datelist[2])
    if calendar.isleap(year):
        if mon==1 and num==31 or mon==2 and num==29 or mon==3 and num==31 or mon==4 and num==30 or mon==5 and num==31 or mon==6 and num==30 or mon==7 and num==31 or mon==8 and num==31 or mon==9 and num==30 or mon==10 and num==31 or mon==11 and num==30 or mon==12 and num==31:
            user_data=await rq.get_user(callback.from_user.id)
            for user in user_data:
                await bot.send_photo(photo=img[8], chat_id=callback.from_user.id, caption=f'üõç <b>–ú–∞–≥–∞–∑–∏–Ω —Ä–æ–±—É–∫—Å–æ–≤:</b>\n\n<b>1 —Ä–æ–±—É–∫—Å = 5 —è–∏—Ü</b>\n\n<b>–£ –≤–∞—Å {user.eggs}</b> —è–∏—Ü\n–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞<b>{int(math.floor(user.eggs/5)) if user.eggs >=5 else 0}</b>\n\n<b>–ü–ï–†–ï–î –í–´–í–û–î–û–ú –ò –î–û –ï–ì–û –ö–û–ù–¶–ê –£ –í–ê–° –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –û–î–ò–ù –ò –¢–û–¢ –ñ–ï –Æ–ó–ï–†–ù–ï–ô–ú!!!</b>', reply_markup=await kb.withdraw())
                await state.update_data(amount=int(math.floor(user.eggs/5)))
        else:
            await callback.message.answer('–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞.\n\n–ö—É—Ä—Å <b>5ü•ö = 1ROBUX</b>.', reply_markup=await kb.del_msg())
    else:
        if mon==1 and num==31 or mon==2 and num==28 or mon==3 and num==31 or mon==4 and num==30 or mon==5 and num==31 or mon==6 and num==30 or mon==7 and num==31 or mon==8 and num==31 or mon==9 and num==30 or mon==10 and num==31 or mon==11 and num==30 or mon==12 and num==31:
            user_data=await rq.get_user(callback.from_user.id)
            for user in user_data:
                await bot.send_photo(photo=img[8], chat_id=callback.from_user.id, caption=f'üõç <b>–ú–∞–≥–∞–∑–∏–Ω —Ä–æ–±—É–∫—Å–æ–≤:</b>\n\n<b>1 —Ä–æ–±—É–∫—Å = 5 —è–∏—Ü</b>\n\n<b>–£ –≤–∞—Å {user.eggs}</b> —è–∏—Ü\n–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞<b>{int(math.floor(user.eggs/5)) if user.eggs >=5 else 0}</b>\n\n<b>–ü–ï–†–ï–î –í–´–í–û–î–û–ú –ò –î–û –ï–ì–û –ö–û–ù–¶–ê –£ –í–ê–° –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –û–î–ò–ù –ò –¢–û–¢ –ñ–ï –Æ–ó–ï–†–ù–ï–ô–ú!!!</b>', reply_markup=await kb.withdraw())
                await state.update_data(amount=int(math.floor(user.eggs/5)))
        else:
            await callback.message.answer('–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞.\n\n–ö—É—Ä—Å <b>5ü•ö = 1ROBUX</b>.', reply_markup=await kb.del_msg())

@router.callback_query(F.data=='withdraw_all')
async def withdraw_all(callback: CallbackQuery, state: FSMContext, bot: Bot):
    datelist = str(datetime.now()).split(' ')[0].split('-')
    year = int(datelist[0])
    mon = int(datelist[1])
    num = int(datelist[2])
    if calendar.isleap(year):
        if mon==1 and num==31 or mon==2 and num==29 or mon==3 and num==31 or mon==4 and num==30 or mon==5 and num==31 or mon==6 and num==30 or mon==7 and num==31 or mon==8 and num==31 or mon==9 and num==30 or mon==10 and num==31 or mon==11 and num==30 or mon==12 and num==31:
            user_data=await rq.get_user(callback.from_user.id)
            for user in user_data:
                if user.eggs >= 5:
                    await callback.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –≤ —Ä–æ–±–ª–æ–∫—Å–µ:</b>')
                    await state.set_state(get.roblox_name)
                else:
                    await callback.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è–∏—Ü –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞')
    else:
        if mon==1 and num==31 or mon==2 and num==28 or mon==3 and num==31 or mon==4 and num==30 or mon==5 and num==31 or mon==6 and num==30 or mon==7 and num==31 or mon==8 and num==31 or mon==9 and num==30 or mon==10 and num==31 or mon==11 and num==30 or mon==12 and num==31:
            user_data=await rq.get_user(callback.from_user.id)
            for user in user_data:
                if user.eggs >= 5:
                    await callback.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –≤ —Ä–æ–±–ª–æ–∫—Å–µ:</b>')
                    await state.set_state(get.roblox_name)
                else:
                    await callback.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è–∏—Ü –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞')
                
@router.message(get.roblox_name)
async def create_req(message: Message, state: FSMContext):
    await rq.create_req(message.from_user.id, message.from_user.username, message.text)
    await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –≤–∞–º –≤—ã–ø–ª–∞—Ç—è—Ç —Ä–æ–±—É–∫—Å—ã.', 
                         reply_markup=await kb.to_main())
    await state.clear()

@router.callback_query(F.data=='answer')
async def answer(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('<b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>', 
                                     reply_markup=await kb.del_msg())
    await state.set_state(get.user_message)
    
@router.message(get.user_message)
async def user_message(message: Message, state: FSMContext, bot: Bot):
    await message.answer('<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.</b>', reply_markup=await kb.del_msg())
    req_data = await rq.get_req_tgid(message.from_user.id)
    for req in req_data:
        for admin in admins_list:
            await bot.send_message(chat_id=admin, text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {req.username}(tgid:{req.tg_id})\n\n{message.text}', 
                                   reply_markup=await kb.answer_admin(message.from_user.id, req.id))
    await state.clear()


#apanel

@router.message(Command('apanel'), IsAdmin(admins_list))
async def apanel(message: Message):
    await message.answer('–í—ã –∑–∞—à–ª–∏ –≤ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=await kb.apanel())

@router.callback_query(F.data=='amain', IsAdmin2(admins_list))
async def amain(callback: CallbackQuery):
    await callback.message.edit_text('–í—ã –∑–∞—à–ª–∏ –≤ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=await kb.apanel())
    
@router.callback_query(F.data=='create_mail', IsAdmin2(admins_list))
async def create_mail(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', reply_markup=await kb.backtoapanel())
    await state.set_state(get.mail)
    
@router.message(get.mail, IsAdmin(admins_list))
async def mailq(message: Message, state: FSMContext):
    await state.update_data(mail=message.text)
    await message.answer(f'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?\n\n–¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n{message.text}', reply_markup=await kb.createmail())


@router.callback_query(F.data=='createmailall', IsAdmin2(admins_list))
async def createmailall(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    users_data = await rq.get_users()
    await callback.message.edit_text('–í–∞–º –ø—Ä–∏–¥—ë—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è.', reply_markup=await kb.backtoapanel())
    count_a = 0
    count_b = 0
    for user in users_data:
        try:
            await bot.send_message(chat_id=user.tg_id, text=data['mail'])
            count_a += 1
        except:
            count_b += 1
    await callback.message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞.\n\n–£—Å–ø–µ—à–Ω—ã–µ: {count_a}\n–ù–µ—É–¥–∞—á–Ω—ã–µ: {count_b}')
    await state.clear()

@router.callback_query(F.data.startswith('selectuser_'), IsAdmin2(admins_list))
async def selectuser(callback: CallbackQuery):
    user_data = await rq.get_user(callback.data.split('_')[1])
    for user in user_data:
        await callback.message.edit_text(f'TG_ID: {user.tg_id}\n\n–ù–∏–∫ –∫—É—Ä–∏—Ü—ã: {user.chickenname}\n–ñ–∏–∑–Ω–µ–π: {user.chickenhp}\n–£—Ä–æ–≤–µ–Ω—å: {user.chickenlvl}\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {user.fed}\n–Ø–∏—Ü: {user.eggs}\n\n–ü—Ä–∏–≥–ª–∞—Å–∏–ª: {user.invitefrom if user.invitefrom !='None'else '–ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞–ª'}\n–ö–æ–ª-–≤–æ —Ä–µ—Ñ–æ–≤: {user.ref_count}\n\n–ì—Ä–∞–±–∏—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç?: {'–î–∞' if user.now_robbery != '0' else '–ù–µ—Ç'}\n–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –≥—Ä–∞–±–∏–ª: {user.last_rob} —á–∏—Å–ª–∞', reply_markup=await kb.selectuser(user.tg_id))

@router.callback_query(F.data.startswith('edit_'), IsAdmin2(admins_list))
async def edit(callback: CallbackQuery, state: FSMContext):
    await state.update_data(upd_id=callback.data.split('_')[2])
    if callback.data.split('_')[1] == 'name':
        await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫—É—Ä–∏—Ü—ã:', reply_markup=await kb.editback(callback.data.split('_')[2]))
        await state.set_state(get.name) 
    elif callback.data.split('_')[1] == 'hp':
        await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π –∏–ª–∏ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:', reply_markup=await kb.edithp(callback.data.split('_')[2]))
        await state.set_state(get.hp)
    elif callback.data.split('_')[1] == 'fed':
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä–∏—Ü—ã:', reply_markup=await kb.editfed(callback.data.split('_')[2]))
        await state.set_state(get.fed)
    elif callback.data.split('_')[1] == 'eggs':
        await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∏—Ü:', reply_markup=await kb.editback(callback.data.split('_')[2]))
        await state.set_state(get.eggs)
    elif callback.data.split('_')[1] == 'refs':
        await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', reply_markup=await kb.editback(callback.data.split('_')[2]))
        await state.set_state(get.ref_count)
    elif callback.data.split('_')[1] == 'lvl':
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å:', reply_markup=await kb.editlvl(callback.data.split('_')[2]))
        await state.set_state(get.lvl)

@router.callback_query(F.data.startswith('choiseedit'), IsAdmin2(admins_list))
async def choice(callback: CallbackQuery, state: FSMContext):
    if callback.data.split('_')[1] == 'hp':
        await callback.message.edit_text('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π', reply_markup=await kb.editback(callback.data.split('_')[2]))
        await rq.upd_hp(callback.data.split('_')[2], 
                        callback.data.split('_')[3])
        await state.clear()
    elif callback.data.split('_')[1] == 'fed':
        await callback.message.edit_text('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä–∏—Ü—ã', reply_markup=await kb.editback(callback.data.split('_')[2]))
        await rq.upd_fed(callback.data.split('_')[2], 
                        callback.data.split('_')[3])
        await state.clear()
    elif callback.data.split('_')[1] == 'lvl':
        await callback.message.edit_text('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∫—É—Ä–∏—Ü—ã', reply_markup=await kb.editback(callback.data.split('_')[2]))
        await rq.upd_lvl(callback.data.split('_')[2],
                        callback.data.split('_')[3])
        await state.clear()

@router.message(get.eggs, IsAdmin(admins_list))
async def edit_eggs(message: Message, state: FSMContext):
    data = await state.get_data()
    try:
        await rq.upd_eggs(data['upd_id'], int(message.text))
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∏—Ü.', reply_markup=await kb.editback(data['upd_id']))
    except:
        await message.answer('–ü–æ–º–µ–Ω—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∏—Ü –Ω–µ —É–¥–∞–ª–æ—Å—å', reply_markup=await kb.editback(data['upd_id']))
        
@router.message(get.ref_count, IsAdmin(admins_list))
async def edit_refs(message: Message, state: FSMContext):
    data = await state.get_data()
    try:
        await rq.upd_count(data['upd_id'], message.text)
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–æ–≤.', reply_markup=await kb.editback(data['upd_id']))
    except:
        await message.answer('–ü–æ–º–µ–Ω—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å', reply_markup=await kb.editback(data['upd_id']))
        
@router.message(get.hp, IsAdmin(admins_list))
async def edit_hp(message: Message, state: FSMContext):
    data = await state.get_data()
    try:
        await rq.upd_hp(data['upd_id'], message.text)
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π.', reply_markup=await kb.editback(data['upd_id']))
    except:
        await message.answer('–ü–æ–º–µ–Ω—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π –Ω–µ —É–¥–∞–ª–æ—Å—å', reply_markup=await kb.editback(data['upd_id']))
        
@router.message(get.name, IsAdmin(admins_list))
async def edit_name(message: Message, state: FSMContext):
    data = await state.get_data()
    try:
        await rq.upd_name(data['upd_id'], message.text)
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–∏ –∏–º—è –∫—É—Ä–∏—Ü—ã.', reply_markup=await kb.editback(data['upd_id']))
    except:
        await message.answer('–ü–æ–º–µ–Ω—è—Ç—å –∏–º—è –∫—É—Ä–∏—Ü—ã –Ω–µ —É–¥–∞–ª–æ—Å—å', reply_markup=await kb.editback(data['upd_id']))

@router.callback_query(F.data=='search', IsAdmin2(admins_list))
async def search(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ telegram id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', reply_markup=await kb.backtousers())
    await state.set_state(get.tg_id)
    
@router.message(get.tg_id, IsAdmin(admins_list))
async def get_search(message: Message, state: FSMContext):
    try:
        user_data = await rq.get_user(message.text)
        for user in user_data:
            await message.answer(f'TG_ID: {user.tg_id}\n\n–ù–∏–∫ –∫—É—Ä–∏—Ü—ã: {user.chickenname}\n–ñ–∏–∑–Ω–µ–π: {user.chickenhp}\n–£—Ä–æ–≤–µ–Ω—å: {user.chickenlvl}\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {user.fed}\n–Ø–∏—Ü: {user.eggs}\n\n–ü—Ä–∏–≥–ª–∞—Å–∏–ª: {user.invitefrom if user.invitefrom !='None'else '–ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞–ª'}\n–ö–æ–ª-–≤–æ —Ä–µ—Ñ–æ–≤: {user.ref_count}\n\n–ì—Ä–∞–±–∏—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç?: {'–î–∞' if user.now_robbery != '0' else '–ù–µ—Ç'}\n–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –≥—Ä–∞–±–∏–ª: {user.last_rob} —á–∏—Å–ª–∞', reply_markup=await kb.selectuser(user.tg_id))
    except:
        await message.answer('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É')

@router.callback_query(F.data=='check_all_users', IsAdmin2(admins_list))
async def check_all_users(callback: CallbackQuery):
    await callback.message.edit_text('–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ [tg_id | –∏–º—è –∫—É—Ä–∏—Ü—ã]:', 
                                     reply_markup=await kb.check_all_users(0))

@router.callback_query(F.data=='check_all_req', IsAdmin2(admins_list))
async def check_all_req(callback: CallbackQuery):
    await callback.message.edit_text('–í—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ [username | —Ä–æ–±—É–∫—Å—ã]:', 
                                     reply_markup=await kb.all_req(0))
    
@router.callback_query(F.data.startswith('pagereq_'), IsAdmin2(admins_list))
async def pagereq(callback: CallbackQuery):
    await callback.message.edit_text('–í—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ [username | —Ä–æ–±—É–∫—Å—ã]:', 
                                     reply_markup=await kb.all_req(callback.data.split('_')[1]))
    
@router.callback_query(F.data.startswith('page_'), IsAdmin2(admins_list))
async def pageusers(callback: CallbackQuery):
    await callback.message.edit_text('–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ [tg_id | –∏–º—è –∫—É—Ä–∏—Ü—ã]:', 
                                     reply_markup=await kb.check_all_users(callback.data.split('_')[1]))

@router.callback_query(F.data.startswith('checkreq_'), IsAdmin2(admins_list))
async def checkreq(callback: CallbackQuery, state: FSMContext, bot: Bot):
    req_data = await rq.get_req(callback.data.split('_')[1])
    for req in req_data:
        await callback.message.edit_text(f'–ó–∞—è–≤–∫–∞ –æ—Ç {req.username} (tgid: {req.tg_id})\n\n–í—ã–≤–æ–¥–∏—Ç {req.amount}\n\n–ù–∏–∫ –≤ —Ä–æ–±–ª–æ–∫—Å–µ: {req.roblox_name}', 
                                         reply_markup=await kb.check_req(req.tg_id, req.id))

@router.callback_query(F.data.startswith('paid_'), IsAdmin2(admins_list))
async def paid(callback: CallbackQuery, state: FSMContext, bot: Bot):
    req_data = await rq.get_req(callback.data.split('_')[1])
    for req in req_data:
        await bot.send_message(chat_id=req.tg_id, text='–†–æ–±—É–∫—Å—ã –±—ã–ª–∏ –≤—ã–ø–ª–∞—á–µ–Ω—ã.', reply_markup=await kb.del_msg())
    await rq.del_req(callback.data.split('_')[1])
    await callback.message.edit_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.', reply_markup=await kb.paid())

@router.callback_query(F.data.startswith('sendmsg_'), IsAdmin2(admins_list))
async def sendmsg(callback: CallbackQuery, state: FSMContext):
    await state.update_data(to_id=callback.data.split('_')[2])
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', 
                                     reply_markup=await kb.sendmsg(callback.data.split('_')[1]))
    await state.update_data(req_id=callback.data.split('_')[1])
    await state.set_state(get.message)
    
@router.callback_query(F.data.startswith('sendmsg2_'), IsAdmin2(admins_list))
async def sendmsg2(callback: CallbackQuery, state: FSMContext):
    await state.update_data(to_id=callback.data.split('_')[2])
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', 
                                     reply_markup=await kb.sendmsg2(callback.data.split('_')[2]))
    await state.set_state(get.message)

@router.message(get.message, IsAdmin(admins_list))
async def send_msg(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    await bot.send_message(chat_id=data['to_id'], text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:\n\n{message.text}', 
                           reply_markup=await kb.answer())
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.', 
                         reply_markup=await kb.sendmsg(data['req_id']))
    await state.clear()
    
@router.message(get.message2, IsAdmin(admins_list))
async def send_msg2(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    await bot.send_message(chat_id=data['to_id'], text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:\n\n{message.text}', 
                           reply_markup=await kb.answer())
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.', 
                         reply_markup=await kb.sendmsg2(data['to_id']))
    await state.clear()

@router.callback_query(F.data=='check_all_users', IsAdmin2(admins_list))
async def check_all_users(callback: CallbackQuery):
    await callback.message.edit_text('–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ [username | —Ä–æ–±—É–∫—Å—ã]:', 
                                     reply_markup=await kb.all_req())


